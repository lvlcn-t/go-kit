// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware

import (
	"sync"
)

// Ensure, that tokenUnmarshalerMock does implement tokenUnmarshaler.
// If this is not the case, regenerate this file with moq.
var _ tokenUnmarshaler = &tokenUnmarshalerMock{}

// tokenUnmarshalerMock is a mock implementation of tokenUnmarshaler.
//
//	func TestSomethingThatUsestokenUnmarshaler(t *testing.T) {
//
//		// make and configure a mocked tokenUnmarshaler
//		mockedtokenUnmarshaler := &tokenUnmarshalerMock{
//			ClaimsFunc: func(claims any) error {
//				panic("mock out the Claims method")
//			},
//		}
//
//		// use mockedtokenUnmarshaler in code that requires tokenUnmarshaler
//		// and then make assertions.
//
//	}
type tokenUnmarshalerMock struct {
	// ClaimsFunc mocks the Claims method.
	ClaimsFunc func(claims any) error

	// calls tracks calls to the methods.
	calls struct {
		// Claims holds details about calls to the Claims method.
		Claims []struct {
			// Claims is the claims argument value.
			Claims any
		}
	}
	lockClaims sync.RWMutex
}

// Claims calls ClaimsFunc.
func (mock *tokenUnmarshalerMock) Claims(claims any) error {
	if mock.ClaimsFunc == nil {
		panic("tokenUnmarshalerMock.ClaimsFunc: method is nil but tokenUnmarshaler.Claims was just called")
	}
	callInfo := struct {
		Claims any
	}{
		Claims: claims,
	}
	mock.lockClaims.Lock()
	mock.calls.Claims = append(mock.calls.Claims, callInfo)
	mock.lockClaims.Unlock()
	return mock.ClaimsFunc(claims)
}

// ClaimsCalls gets all the calls that were made to Claims.
// Check the length with:
//
//	len(mockedtokenUnmarshaler.ClaimsCalls())
func (mock *tokenUnmarshalerMock) ClaimsCalls() []struct {
	Claims any
} {
	var calls []struct {
		Claims any
	}
	mock.lockClaims.RLock()
	calls = mock.calls.Claims
	mock.lockClaims.RUnlock()
	return calls
}
