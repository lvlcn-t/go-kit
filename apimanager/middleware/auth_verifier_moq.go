// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware

import (
	"context"
	"sync"
)

// Ensure, that verifierMock does implement verifier.
// If this is not the case, regenerate this file with moq.
var _ verifier = &verifierMock{}

// verifierMock is a mock implementation of verifier.
//
//	func TestSomethingThatUsesverifier(t *testing.T) {
//
//		// make and configure a mocked verifier
//		mockedverifier := &verifierMock{
//			VerifyFunc: func(ctx context.Context, token string) (tokenUnmarshaler, error) {
//				panic("mock out the Verify method")
//			},
//		}
//
//		// use mockedverifier in code that requires verifier
//		// and then make assertions.
//
//	}
type verifierMock struct {
	// VerifyFunc mocks the Verify method.
	VerifyFunc func(ctx context.Context, token string) (tokenUnmarshaler, error)

	// calls tracks calls to the methods.
	calls struct {
		// Verify holds details about calls to the Verify method.
		Verify []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockVerify sync.RWMutex
}

// Verify calls VerifyFunc.
func (mock *verifierMock) Verify(ctx context.Context, token string) (tokenUnmarshaler, error) {
	if mock.VerifyFunc == nil {
		panic("verifierMock.VerifyFunc: method is nil but verifier.Verify was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockVerify.Lock()
	mock.calls.Verify = append(mock.calls.Verify, callInfo)
	mock.lockVerify.Unlock()
	return mock.VerifyFunc(ctx, token)
}

// VerifyCalls gets all the calls that were made to Verify.
// Check the length with:
//
//	len(mockedverifier.VerifyCalls())
func (mock *verifierMock) VerifyCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockVerify.RLock()
	calls = mock.calls.Verify
	mock.lockVerify.RUnlock()
	return calls
}
